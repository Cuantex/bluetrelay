
bluetooth_relay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000108  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e1  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000096  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000007a  00000000  00000000  000002df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000198  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	0e d0       	rcall	.+28     	; 0x5c <main>
  40:	27 c0       	rjmp	.+78     	; 0x90 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <_Z8InitUARTv>:
 
 
void InitUART(void) { //Configurando la UART
  
  
 UBRRL = BAUD_PRESCALE;
  44:	85 e0       	ldi	r24, 0x05	; 5
  46:	89 b9       	out	0x09, r24	; 9
 UBRRH = (BAUD_PRESCALE >> 8);
  48:	12 b8       	out	0x02, r1	; 2
 UCSRB = (1<<RXEN)|(1<<TXEN);;//habilita la transmision y recepcion de datos 
  4a:	88 e1       	ldi	r24, 0x18	; 24
  4c:	8a b9       	out	0x0a, r24	; 10
 UCSRC = (1<<USBS)|(3<<UCSZ0);//
  4e:	8e e0       	ldi	r24, 0x0E	; 14
  50:	83 b9       	out	0x03, r24	; 3
  52:	08 95       	ret

00000054 <_Z11ReceiveBytev>:
 }
 
 
unsigned char ReceiveByte(void){ //Función para recibir un byte
  
 while (!(UCSRA & (1<<RXC)));//Esperar la recepción
  54:	5f 9b       	sbis	0x0b, 7	; 11
  56:	fe cf       	rjmp	.-4      	; 0x54 <_Z11ReceiveBytev>
  
 return UDR; //Retornar el dato tomado de la UART
  58:	8c b1       	in	r24, 0x0c	; 12
  
}
  5a:	08 95       	ret

0000005c <main>:
 
 
int main (void) {
  
 
 DDRB=0xFF;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	87 bb       	out	0x17, r24	; 23
 InitUART(); //Inicializar la UART
  60:	f1 df       	rcall	.-30     	; 0x44 <_Z8InitUARTv>
 PORTB =0x00;
  62:	18 ba       	out	0x18, r1	; 24
 while(1){
  
 dato=ReceiveByte(); //Recibir un dato de la UART
  64:	f7 df       	rcall	.-18     	; 0x54 <_Z11ReceiveBytev>
  66:	80 93 60 00 	sts	0x0060, r24
  
 if (dato==0x01) //Compara el dato recibido 
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	09 f4       	brne	.+2      	; 0x70 <main+0x14>
 {
 PORTB |= (1<<0);//al pin cero del puerto B le asigna un uno logico 
  6e:	c0 9a       	sbi	0x18, 0	; 24
 }
  
 if (dato==0x02)
  70:	80 91 60 00 	lds	r24, 0x0060
  74:	82 30       	cpi	r24, 0x02	; 2
  76:	09 f4       	brne	.+2      	; 0x7a <main+0x1e>
 {
 PORTB &=~ (1<<0);// al pin cero del puerto B le asigna la negacion de un uno logico 
  78:	c0 98       	cbi	0x18, 0	; 24
 }
 if (dato==0x03)
  7a:	80 91 60 00 	lds	r24, 0x0060
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	09 f4       	brne	.+2      	; 0x84 <main+0x28>
 {
 PORTB |= (1<<1); //al pin uno del puerto B le asigna un uno logico 
  82:	c1 9a       	sbi	0x18, 1	; 24
 }
  
 if (dato==0x04)
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	84 30       	cpi	r24, 0x04	; 4
  8a:	61 f7       	brne	.-40     	; 0x64 <main+0x8>
 {
 PORTB &=~ (1<<1);// al pin uno del puerto B le asigna la negacion de un uno logico
  8c:	c1 98       	cbi	0x18, 1	; 24
  8e:	ea cf       	rjmp	.-44     	; 0x64 <main+0x8>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
